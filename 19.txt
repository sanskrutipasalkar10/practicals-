1.

Java Program: Pizza Store with Factory Method
java
Copy code
// Abstract Pizza class
abstract class Pizza {
    String name;
    String dough;
    String sauce;
    String cheese;

    // Prepare method that can be overridden by different pizza types
    public void prepare() {
        System.out.println("Preparing " + name);
        System.out.println("Tossing dough: " + dough);
        System.out.println("Adding sauce: " + sauce);
        System.out.println("Adding cheese: " + cheese);
    }

    public void bake() {
        System.out.println("Baking " + name + " at 350 degrees for 25 minutes");
    }

    public void cut() {
        System.out.println("Cutting " + name + " into slices");
    }

    public void box() {
        System.out.println("Boxing the " + name);
    }

    public String getName() {
        return name;
    }
}

// Concrete Pizza classes

class NYStyleCheesePizza extends Pizza {
    public NYStyleCheesePizza() {
        name = "NY Style Cheese Pizza";
        dough = "Thin Crust Dough";
        sauce = "Marinara Sauce";
        cheese = "Reggiano Cheese";
    }
}

class ChicagoStyleCheesePizza extends Pizza {
    public ChicagoStyleCheesePizza() {
        name = "Chicago Style Cheese Pizza";
        dough = "Extra Thick Crust Dough";
        sauce = "Plum Tomato Sauce";
        cheese = "Mozzarella Cheese";
    }

    // Chicago style pizza is different in cutting method
    @Override
    public void cut() {
        System.out.println("Cutting the pizza into square slices");
    }
}

class NYStyleVeggiePizza extends Pizza {
    public NYStyleVeggiePizza() {
        name = "NY Style Veggie Pizza";
        dough = "Thin Crust Dough";
        sauce = "Tomato Sauce";
        cheese = "Mozzarella Cheese";
    }
}

class ChicagoStyleVeggiePizza extends Pizza {
    public ChicagoStyleVeggiePizza() {
        name = "Chicago Style Veggie Pizza";
        dough = "Thick Crust Dough";
        sauce = "Tomato Sauce";
        cheese = "Mozzarella Cheese";
    }

    // Chicago style pizza has a different cutting method
    @Override
    public void cut() {
        System.out.println("Cutting the veggie pizza into square slices");
    }
}

// PizzaStore class with factory method
abstract class PizzaStore {

    // Factory method for creating pizzas
    public Pizza orderPizza(String type) {
        Pizza pizza;

        pizza = createPizza(type);  // Factory method is called here
        
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
        
        return pizza;
    }

    // Abstract method that subclasses must implement to create specific types of pizza
    protected abstract Pizza createPizza(String type);
}

// Concrete PizzaStore class for New York Style Pizza Store
class NYPizzaStore extends PizzaStore {

    @Override
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new NYStyleCheesePizza();
        } else if (type.equals("veggie")) {
            return new NYStyleVeggiePizza();
        } else {
            return null;  // Handle other types if needed
        }
    }
}

// Concrete PizzaStore class for Chicago Style Pizza Store
class ChicagoPizzaStore extends PizzaStore {

    @Override
    protected Pizza createPizza(String type) {
        if (type.equals("cheese")) {
            return new ChicagoStyleCheesePizza();
        } else if (type.equals("veggie")) {
            return new ChicagoStyleVeggiePizza();
        } else {
            return null;  // Handle other types if needed
        }
    }
}

// Main class to test the Factory Method pattern
public class PizzaStoreTest {
    public static void main(String[] args) {
        
        PizzaStore nyStore = new NYPizzaStore();
        PizzaStore chicagoStore = new ChicagoPizzaStore();
        
        // Ordering pizzas from the New York store
        System.out.println("Ordering NY Style Cheese Pizza:\n");
        Pizza pizza1 = nyStore.orderPizza("cheese");
        System.out.println("Ordered: " + pizza1.getName() + "\n");
        
        // Ordering pizzas from the Chicago store
        System.out.println("Ordering Chicago Style Cheese Pizza:\n");
        Pizza pizza2 = chicagoStore.orderPizza("cheese");
        System.out.println("Ordered: " + pizza2.getName() + "\n");
        
        // Ordering a Veggie Pizza from the NY store
        System.out.println("Ordering NY Style Veggie Pizza:\n");
        Pizza pizza3 = nyStore.orderPizza("veggie");
        System.out.println("Ordered: " + pizza3.getName() + "\n");
        
        // Ordering a Veggie Pizza from the Chicago store
        System.out.println("Ordering Chicago Style Veggie Pizza:\n");
        Pizza pizza4 = chicagoStore.orderPizza("veggie");
        System.out.println("Ordered: " + pizza4.getName() + "\n");
    }
}
Explanation:
Pizza (Abstract Class):

This is the base class for all pizza types. It has attributes for name, dough, sauce, and cheese, which are common to all pizzas.
It provides default implementations for the methods prepare(), bake(), cut(), and box(). These can be overridden in concrete pizza classes if necessary.
Concrete Pizza Classes (e.g., NYStyleCheesePizza, ChicagoStyleCheesePizza):

These classes extend Pizza and set specific values for name, dough, sauce, and cheese.
Some pizza types override the cut() method (e.g., Chicago style pizza is cut into square slices).
PizzaStore (Abstract Class):

The PizzaStore class defines a orderPizza() method, which calls the factory method createPizza().
The createPizza() method is abstract and is implemented by subclasses to create specific types of pizza.
Concrete PizzaStore Classes (NYPizzaStore, ChicagoPizzaStore):

These concrete classes implement the createPizza() method to create specific types of pizzas based on the type string (e.g., "cheese", "veggie").
Main Class (PizzaStoreTest):

This is the test class that demonstrates how the PizzaStore class works. It orders different types of pizzas from New York and Chicago pizza stores and prints the results.
Output:
mathematica
Copy code
Ordering NY Style Cheese Pizza:

Preparing NY Style Cheese Pizza
Tossing dough: Thin Crust Dough
Adding sauce: Marinara Sauce
Adding cheese: Reggiano Cheese
Baking NY Style Cheese Pizza at 350 degrees for 25 minutes
Cutting NY Style Cheese Pizza into slices
Boxing the NY Style Cheese Pizza
Ordered: NY Style Cheese Pizza

Ordering Chicago Style Cheese Pizza:

Preparing Chicago Style Cheese Pizza
Tossing dough: Extra Thick Crust Dough
Adding sauce: Plum Tomato Sauce
Adding cheese: Mozzarella Cheese
Baking Chicago Style Cheese Pizza at 350 degrees for 25 minutes
Cutting the pizza into square slices
Boxing the Chicago Style Cheese Pizza
Ordered: Chicago Style Cheese Pizza

Ordering NY Style Veggie Pizza:

Preparing NY Style Veggie Pizza
Tossing dough: Thin Crust Dough
Adding sauce: Tomato Sauce
Adding cheese: Mozzarella Cheese
Baking NY Style Veggie Pizza at 350 degrees for 25 minutes
Cutting NY Style Veggie Pizza into slices
Boxing the NY Style Veggie Pizza
Ordered: NY Style Veggie Pizza

Ordering Chicago Style Veggie Pizza:

Preparing Chicago Style Veggie Pizza
Tossing dough: Thick Crust Dough
Adding sauce: Tomato Sauce
Adding cheese: Mozzarella Cheese
Baking Chicago Style Veggie Pizza at 350 degrees for 25 minutes
Cutting the veggie pizza into square slices
Boxing the Chicago Style Veggie Pizza
Ordered: Chicago Style Veggie Pizza
Key Points:
Factory Method: The createPizza() method in the PizzaStore class is the factory method. Subclasses (like NYPizzaStore and ChicagoPizzaStore) override this method to create specific types of pizzas.
Encapsulation: The pizza creation logic is encapsulated in the factory method, making the PizzaStore class independent of the exact types of pizzas being created.
Extensibility: You can easily add new types of pizzas by creating new classes that extend Pizza and modifying the createPizza() method in the PizzaStore subclass.
This program demonstrates how to use the Factory Method pattern to create different types of pizzas in a flexible and extensible way.

2.


2.

To start with Raspberry Pi and execute various Linux commands, you need to follow these general steps:

Boot your Raspberry Pi:

Connect your Raspberry Pi to a monitor, keyboard, and power source.
Wait for the Raspberry Pi to boot up and load the operating system (e.g., Raspberry Pi OS).
Open the Terminal Window:

On the Raspberry Pi desktop, open the terminal by clicking the terminal icon or using Ctrl + Alt + T.
Execute Linux Commands:

You can run a variety of commands in the terminal to perform different operations. Below is a brief description of each command you mentioned:
Basic Linux Commands
ls: Lists files and directories in the current directory.

bash
Copy code
ls
ls -l   # Detailed listing with permissions, owner, and timestamps
cd: Changes the current directory.

bash
Copy code
cd /path/to/directory  # Navigate to a specific directory
cd ..                  # Go up one level in the directory structure
touch: Creates an empty file.

bash
Copy code
touch newfile.txt
mv: Moves or renames files and directories.

bash
Copy code
mv file.txt /path/to/new/location/
mv oldname.txt newname.txt
rm: Removes files or directories.

bash
Copy code
rm file.txt                # Remove a file
rm -r directoryname        # Remove a directory and its contents
man: Displays the manual for a command.

bash
Copy code
man ls   # Shows the manual for the 'ls' command
mkdir: Creates a new directory.

bash
Copy code
mkdir new_directory
rmdir: Removes an empty directory.

bash
Copy code
rmdir empty_directory
tar: Archives multiple files into one file (often used with compression).

bash
Copy code
tar -cvf archive.tar /path/to/files  # Create an archive
tar -xvf archive.tar                 # Extract an archive
gzip: Compresses files.

bash
Copy code
gzip file.txt        # Compress a file
gunzip file.txt.gz   # Decompress a file
cat: Displays the contents of a file.

bash
Copy code
cat filename.txt
more and less: View the contents of a file one screen at a time.

bash
Copy code
more filename.txt
less filename.txt
ps: Displays information about currently running processes.

bash
Copy code
ps
ps aux               # Detailed view of all running processes
sudo: Runs a command as the superuser or another user.

bash
Copy code
sudo apt update      # Run the 'apt update' command as a superuser
cron: A daemon to run scheduled tasks (cron jobs).

bash
Copy code
crontab -e           # Edit the current user's crontab
chown: Changes the ownership of a file or directory.

bash
Copy code
sudo chown user:group filename.txt
chgrp: Changes the group ownership of a file or directory.

bash
Copy code
sudo chgrp groupname filename.txt
ping: Checks network connectivity to another host.

bash
Copy code
ping example.com
These commands can help you navigate and manage your Raspberry Pi environment efficiently.


